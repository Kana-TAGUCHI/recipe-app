// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  emailVerified  DateTime?
  password      String
  name          String
  username      String?   @unique
  image         String?
  favorites     FavoriteUserRecipe[]
  postedRecipes Recipe[]
  reviews       Review[]

  accounts     Account[]
  sessions     Session[]
}

// For NextAuth
model Account {
  id                 String    @id @default(cuid())
  userId             String
  providerType       String
  providerId         String
  providerAccountId  String
  refreshToken       String?
  accessToken        String?
  accessTokenExpires DateTime?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  user               User      @relation(fields: [userId], references: [id])
  @@unique([providerId, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  userId       String
  expires      DateTime
  sessionToken String   @unique
  accessToken  String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id])
}

model VerificationRequest {
  id         String   @id @default(cuid())
  identifier  String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}

model Recipe {
  id           String    @id @default(cuid())
  title        String
  ingredients  String[]
  instructions String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  postedBy     User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String
  favoriteBy   FavoriteUserRecipe[]
  reviews      Review[]

  level        Level[]
  meals        Meal[]
  features     Feature[]
  cuisines     CUISINE[]
}

model Review {
  id        String    @id @default(cuid())
  rating    Int
  comment   String?
  createdAt DateTime  @default(now())

  reviewdBy User      @relation(fields: [userId], references: [id])
  userId    String
  recipe    Recipe    @relation(fields: [recipeId], references: [id])
  recipeId  String
}

model FavoriteUserRecipe {
  id        String    @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user      User @relation(fields: [userId], references: [id])
  recipe    Recipe @relation(fields: [recipeId], references: [id])
  userId    String
  recipeId  String
}

enum Level {
  EASY
  MIDDLE
  DIFFICULT
}

enum Meal {
  BREAKFAST
  LUNCH
  DINNER
  SIDE_DISHE
  SOUP
  APPETIZER
  DESSERT
}

enum Feature {
  SIMPLE_QUICK
  CLASSIC
  COMFORT_FOOD
  PARTY
  ONE_POT_MEAL
}

enum CUISINE {
  ITALIAN
  AMERICAN
  MEXICAN
  INDIAN
  GREEK
  JAPNESE
  CHINESE
  KOREAN
  OTHERS
}
